name: iOS App Deployment
author: Petar Kramaric
description: GitHub action for deploying iOS applications

inputs:
  github_token:
    description: A GitHub personal access token with repo scope to access private repositories.
    required: true
  branch:
    description: Which branch is running the job
    required: true
    type: choice
    options:
      - main
  version:
    description: "Semver type of new version (major / minor / patch)"
    required: true
    type: choice
    options:
      - build
      - patch
      - minor
      - major
  who_trigger:
    description: "Who trigger the pipeline"
    required: true
  ssh_key_flybitsbot:
    description: "The SSH Key associated to the FlybitsBot user to allow it to perform git operation on other private repos"
    required: true
  build_certification_base64:
    description: The signing certificate connected to the provision profile and associated to the application
    required: true
  p12_password:
    description: The password to the p12 file associated to the user for signing the iOS application
    required: true
  provision_profile_base64:
    description: The Provision Profile for the Application in Base64 format. This is obtained in the profile section of the App Store Connect console.
    required: true
  keychain_password:
    description: An arbitrary password that will be used by the runner to stored data in the keychain 
    required: true
  plist_path:
    description: The path to the plist file, includes the plist file itself.
    required: true
  xcarchive_path:
    description: The path to the xcarchive file, includes the xcarchive file itself.
    required: true
  scheme:
    description: The scheme for the application
    required: true
  export_options_plist:
    description: The export_options.plist file
    required: true
  ios_appstore_api_private_key:
    description: The private api key in base64 encoded format for the signing API key generated in the Apple Store Connect console.
    required: true
  ios_appstore_api_key_id:
    description: The app store API Key ID (not sensitive) - can be found in the App Store Connect Console, Integrations Tab
    required: true
  ios_appstore_issuer_id:
    description: The app store Issuer ID (not sensitive) - can be found in the App Store Connect Console, Integrations Tab
    required: true
  ipa_name:
    description: The name of the IPA file that is to be exported
    required: true
  version_filepath:
    description: The path of the version file that should be read and updated
    required: true
  tag_suffix:
    description: The tag suffix that should be used 
    required: optional

runs:
  using: "composite"
  steps:
  
    #Validate Inputs
    - name: Inputs validation
      shell: bash
      run: |
        [[ "${{ inputs.branch }}" =~ ^(main)$ ]] || { echo "BRANCH ERROR: This pipeline it's only available for main branch!" ; exit 1; }
        [[ "${{ inputs.version }}" ]] || { echo "version input is empty" ; exit 1; }
        [[ "${{ inputs.who_trigger }}" ]] || { echo "who_trigger input is empty" ; exit 1; }
        [[ "${{ inputs.ssh_key_flybitsbot }}" ]] || { echo "ssh_key_flybitsbot input is empty" ; exit 1; }
        [[ "${{ inputs.build_certification_base64 }}" ]] || { echo "build_certification_base64 input is empty" ; exit 1; }
        [[ "${{ inputs.p12_password }}" ]] || { echo "p12_password input is empty" ; exit 1; }
        [[ "${{ inputs.provision_profile_base64 }}" ]] || { echo "provision_profile_base64 input is empty" ; exit 1; }
        [[ "${{ inputs.keychain_password }}" ]] || { echo "ssh_key_flybitsbot input is empty" ; exit 1; }
        [[ "${{ inputs.plist_path }}" ]] || { echo "plist_path input is empty" ; exit 1; }
        [[ "${{ inputs.xcarchive_path }}" ]] || { echo "xcarchive_path input is empty" ; exit 1; }
        [[ "${{ inputs.scheme }}" ]] || { echo "scheme input is empty" ; exit 1; }
        [[ "${{ inputs.export_options_plist }}" ]] || { echo "export_options_plist input is empty" ; exit 1; }
        [[ "${{ inputs.ios_appstore_api_private_key }}" ]] || { echo "ios_appstore_api_private_key input is empty" ; exit 1; }
        [[ "${{ inputs.ios_appstore_api_key_id }}" ]] || { echo "ios_appstore_api_key_id input is empty" ; exit 1; }
        [[ "${{ inputs.ios_appstore_issuer_id }}" ]] || { echo "ios_appstore_issuer_id input is empty" ; exit 1; }
        [[ "${{ inputs.ipa_name }}" ]] || { echo "ipa_name input is empty" ; exit 1; }
        [[ "${{ inputs.version_filepath }}" ]] || { echo "version_filepath input is empty" ; exit 1; }

    #Checkout Code
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github_token }}

    #Setup SSH Keys
    - name: Setup SSH Keys and known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ inputs.ssh_key_flybitsbot }}"

    #SETUP GIT LOCAL USER
    - name: Setup Git
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        git config --global user.name "${{ inputs.who_trigger }}"
        git config --global user.email "${{ inputs.who_trigger }}"

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ inputs.build_certification_base64 }}
        P12_PASSWORD: ${{ inputs.p12_password }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ inputs.provision_profile_base64 }}
        KEYCHAIN_PASSWORD: ${{ inputs.keychain_password }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles      

    #Figure out build number
    - name: Bump version major-minor
      uses: HardNorth/github-version-generate@v1.4.0
      with:
        version-source: file
        version-file: ${{ inputs.version_filepath }}
        release-version-cut-prerelease: true
        next-version-increment-patch: ${{ contains(inputs.version, 'patch') }}
        next-version-increment-minor: ${{ contains(inputs.version, 'minor') }}
        next-version-increment-major: ${{ contains(inputs.version, 'major') }}    

    - name: Set Build Number
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        if [ ${{inputs.version}} == "build" ]; then
          build_number=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" ${{ inputs.plist_path }})
          build_number=$((build_number + 1))
        else
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ env.RELEASE_VERSION }}" ${{ inputs.plist_path }}
            build_number=1
        fi
        echo "BUILD_NUMBER=$build_number" >> $GITHUB_ENV
        echo $build_number
        echo ${{ env.BUILD_NUMBER }}
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $build_number" ${{ inputs.plist_path }}

    - name: build archive
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        xcodebuild -scheme "${{ inputs.scheme }}" \
        -archivePath $RUNNER_TEMP/${{ inputs.xcarchive_path }} \
        -sdk iphoneos \
        -configuration Debug \
        -destination generic/platform=iOS \
        clean archive          

    #Export IPA file
    - name: export ipa
      env:
        EXPORT_OPTIONS_PLIST: ${{ inputs.export_options_plist }}
      run: |
        EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
        echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
        xcodebuild -exportArchive -archivePath $RUNNER_TEMP/${{ inputs.xcarchive_path }} -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

    #Decode API Key
    - name: decode API key
      env:
        API_KEY_BASE64: ${{ inputs.ios_appstore_api_private_key }}
      run: |
        mkdir -p ~/private_keys
        echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ inputs.ios_appstore_api_key_id }}.p8

    #Upload to app store
    - name: Upload to testflight
      run: |
        xcrun altool --validate-app -f ${{ runner.temp }}/build/${{ inputs.ipa_name }} -t ios --apiKey ${{ inputs.ios_appstore_api_key_id }} --apiIssuer ${{ inputs.ios_appstore_issuer_id }}
        xcrun altool --upload-app -f ${{ runner.temp }}/build/${{ inputs.ipa_name }} -t ios --apiKey ${{ inputs.ios_appstore_api_key_id }} --apiIssuer ${{ inputs.ios_appstore_issuer_id }}

    #Update version for next build
    - name: Update Version for Non-build release
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
          if [ ${{inputs.version}} == "build" ]; then
            version=v${{ env.RELEASE_VERSION }}-b${{ env.BUILD_NUMBER }}
          else
            version=v${{ env.RELEASE_VERSION }}
            echo "${{ env.NEXT_VERSION }}" > ${{ inputs.version_filepath }}
          fi

          if [ -n "$(git status --porcelain)" ]; then
            git diff
            git commit -am "Releasing $version [skip ci]"
            git push --force
          fi

          if [ -z "${{ inputs.tag_suffix}}" ]; then
            gh release create "$version" --generate-notes
          else
            gh release create "$version-${{ inputs.tag_suffix}}" --generate-notes 
          fi