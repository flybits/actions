name: AWS Sync
description: Uploads the 'dist' folder to an S3 bucket and invalidates CloudFront cache

inputs:
  aws-cloudfront-distribution-id:
    description: 'The ID of the CloudFront distribution'
    required: true

  aws-iam-role:
    description: 'The IAM role to assume'
    required: true

  aws-s3-bucket-name:
    description: 'The name of the S3 bucket'
    required: true

  aws-s3-bucket-region:
    description: 'The region of the S3 bucket'
    required: true

  dist-folder-name:
    description: 'The name of the folder to sync with S3'
    default: ${{ github.event.repository.name }}
    required: false

  dest-folder-name:
    description: 'The name of the folder to copy files to'
    required: false

  slack-bot-token:
    description: 'A bot token to publish a message on Slack'
    required: true

  web-app-name:
    description: 'A human-readable name of your web application'
    default: ${{ github.event.repository.name }}
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate Github Actions' inputs
      shell: bash
      run: |
        [[ "${{ inputs.aws-cloudfront-distribution-id }}" ]] || { echo "aws-cloudfront-distribution-id input is empty"; exit 1; }
        [[ "${{ inputs.aws-iam-role }}" ]] || { echo "aws-iam-role input is empty"; exit 1; }
        [[ "${{ inputs.aws-s3-bucket-name }}" ]] || { echo "aws-s3-bucket-name input is empty"; exit 1; }
        [[ "${{ inputs.aws-s3-bucket-region }}" ]] || { echo "aws-s3-bucket-region input is empty"; exit 1; }
        [[ "${{ inputs.slack-bot-token }}" ]] || { echo "slack-bot-token input is empty"; exit 1; }

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-iam-role }}
        aws-region: ${{ inputs.aws-s3-bucket-region }}

    - name: Generate build.json file
      shell: bash
      run: |
        echo "{
          \"buildTimestamp\": \"$(date +%s)\",
          \"buildTimestampEST\": \"$(TZ=America/Toronto date -Iseconds)\",
          \"gitRef\": \"${{ github.ref_name }}\",
          \"gitSha\": \"${{ github.sha }}\",
          \"workflowActor\": \"${{ github.triggering_actor }}\",
          \"workflowRunUrl\": \"${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}\",
        }
        " > ${{ inputs.dist-folder-name }}/build.json

        if [ $? -ne 0 ]; then
          echo "Failed to generate build.json file"
          exit 1
        fi

    - name: Copy "dist" folder's contents to S3 bucket
      shell: bash
      run: |
        aws s3 sync ${{ inputs.dist-folder-name }} s3://${{ inputs.aws-s3-bucket-name }} --delete

        if [ $? -ne 0 ]; then
          echo "Failed to sync folder to S3 bucket"
          exit 1
        fi

    - name: Invalidate CloudFront cache
      shell: bash
      run: |
        INVALIDATION_JSON=$(aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/*")

        if [ $? -ne 0 ]; then
          echo "Failed to invalidate Cloudfront's cache"
          exit 1
        fi

        INVALIDATION_ID=$(echo $INVALIDATION_JSON | jq -r '.Invalidation.Id')
        INVALIDATION_STATUS=$(echo $INVALIDATION_JSON | jq -r '.Invalidation.Status')

        echo "Waiting for CloudFront invalidation to complete..."

        while [ "$INVALIDATION_STATUS" != "Completed" ]; do
          INVALIDATION_JSON=$(aws cloudfront get-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --id $INVALIDATION_ID)

          if [ $? -ne 0 ]; then
            echo "Failed to get Cloudfront's invalidation status"
            exit 1
          fi

          INVALIDATION_STATUS=$(echo $INVALIDATION_JSON | jq -r '.Invalidation.Status')

          echo "Status: $INVALIDATION_STATUS"
          sleep 5
        done

    - if: ${{ failure() }}
      name: Notify Slack
      uses: flybits/actions/frontend/slack/job-failure@main
      with:
        bot-token: ${{ inputs.slack-bot-token }}
        message: 'ðŸ¤” AWS sync failed'
        web-app-name: ${{ inputs.web-app-name }}
