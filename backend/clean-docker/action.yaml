name: Cleanup Docker Images
author: Petar Kramaric
description: GitHub action for deleting docker hub images
inputs:
  docker_username:
    description: A username of the docker registry
    required: true
  docker_password:
    description: The password associated to the docker registry user
    required: true
  docker_repo:
    description: The repository where the docker image should be saved. Format is {organization}/{repository}. Comma-separated for list of images to delete.
    required: true
  keep_latest:
    description: Keep the latest number of .dev images (how many should not be deleted)
    required: true
    default: 5

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq

    - name: Input Validation
      shell: bash
      run: |
        [[ "${{ inputs.keep_latest }}" -ge 1 ]] || { echo "keep_latest must be at least 1" ; exit 1; }

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Retrieving Docker JWT
      shell: bash
      run: |
        # Decode the Docker config to extract the token
        TOKEN=$(jq -r '.auths["https://index.docker.io/v2/"].auth' ~/.docker/config.json | base64 -d | cut -d':' -f2)
        echo "DOCKER_TOKEN=${TOKEN}" >> $GITHUB_ENV

    - name: Cleanup Repository Images
      shell: bash
      env:
        DOCKER_TOKEN: ${{ env.DOCKER_TOKEN }}
      run: |
        # Inputs
        INPUTTED_REPOS="${{ inputs.docker_repo }}"
        IFS=',' read -r -a REPOS <<< "$INPUTTED_REPOS"  # Read into array, using comma as IFS

        for REPO in "${REPOS[@]}"; do # Loop through each repository
          echo "Cleaning up images for repository: $REPO"

          KEEP_LATEST="${{ inputs.keep_latest }}"
          CURRENT_PAGE=1
          while true; do
            
            # Fetch all tags for the repository
            url="https://hub.docker.com/v2/repositories/$REPO/tags?page=$CURRENT_PAGE&page_size=100"
            echo "Fetching page $CURRENT_PAGE for tags in $REPO - $url"

            # Get the response and the http code associated to the response
            response=$(curl -s -H "Authorization: JWT $DOCKER_TOKEN" -o response.txt -w "%{http_code}" "$url")
            
            # Split the status code and response.
            http_code="${response: -3}"
            response_body=$(<response.txt)

            # If status code is 404 it means we have reached the end of the list so we can exit the loop and the job will be completed
            if [[ $http_code -eq 404 ]]; then
              echo "Could not find object so most likely we have reached the end - $response_body ..."
              break
            fi

            # If status code is not 200 exit ungracefully.
            if [[ $http_code -ne 200 ]]; then
              echo "Request failed - $response_body ..."
              exit 1
            fi

            # Get all image tags that end with .dev
            TAGS_DEV=$(echo "$response_body" | jq -r '.results[] | select(.name | endswith(".dev")) | .name')

            # Get all image tags that match the staging regex
            TAGS_STAGING=$(echo "$response_body" | jq -r '.results[] | select(.name | test("[a-f0-9]{7,10}$")) | .name')
          
            # Get tags to delete from TAGS_DEV (skip the first N tags)
            TAGS_DEV_TO_DELETE=$(echo "$TAGS_DEV" | tail -n +$((KEEP_LATEST + 1)))

            # Get tags to delete from TAGS_STAGING (skip the first N tags)
            TAGS_STAGING_TO_DELETE=$(echo "$TAGS_STAGING" | tail -n +$((KEEP_LATEST + 1)))

            # Combine the tags to delete from both lists
            TAGS_TO_DELETE=$(echo -e "$TAGS_DEV_TO_DELETE\n$TAGS_STAGING_TO_DELETE")

            # Loop through tags to delete
            for TAG in $TAGS_TO_DELETE; do

              deleteUrl=https://hub.docker.com/v2/repositories/$REPO/tags/$TAG
              echo "Deleting tag: $TAG - $deleteUrl"

              response=$(curl -s -X DELETE -H "Authorization: Bearer $DOCKER_TOKEN" -o response.txt -w "%{http_code}" "$deleteUrl")
              http_code="${response: -3}"

              # If the response is not 204 it means that something went wrong and exit ungracefully
              if [[ $http_code -ne 204 ]]; then
                response_body=$(<response.txt)
                echo "Deleting $TAG Request failed $http_code ... $response_body"
                exit 1
              fi
            done

            # If there are no more pages to iterate through exit the loop and the job should be completed successfully
            if [[ "$next" == "null" ]]; then
              echo "Exiting paging loop for $REPO..."
              break
            fi

            #Update pages and set KEEP_LATEST to 0 as for pages > 1 we do not want to keep any values
            # this is not an issue because it is unlikely that we will have 100 items (the first page) with no .dev images
            KEEP_LATEST=0
            ((CURRENT_PAGE++))
          done

          echo "Cleanup completed for repository: $REPO"
        done # End of the repository loop
