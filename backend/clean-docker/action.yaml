name: Build Docker Image
author: Petar Kramaric
description: GitHub action for deleting docker hub images
inputs:
  docker_username:
    description: A username of the docker registry
    required: true
  docker_password:
    description: The password associated to the docker registry user
    required: true
  docker_repo:
    description: The repository where the docker image should be saved. Format is {organization}/{repository}
    required: true
  keep_latest:
    description: Keep the latest number of .dev images (how many should not be deleted)
    required: true
    default: 10

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Retrieving Docker JWT
      shell: bash
      run: |
        echo "Authenticating with Docker Hub..."
        # Decode the Docker config to extract the token
        TOKEN=$(jq -r '.auths["https://index.docker.io/v1/"].auth' ~/.docker/config.json | base64 -d | cut -d':' -f2)
        echo "DOCKER_TOKEN=${TOKEN}" >> $GITHUB_ENV

    - name: Cleanup Repository Images
      shell: bash
      env:
        DOCKER_TOKEN: ${{ env.DOCKER_TOKEN }}
      run: |
        # Inputs
        REPO="${{ inputs.docker_repo }}"
        KEEP_LATEST="${{ inputs.keep_latest }}"

        echo "Cleaning up images for repository: $REPO"
        CURRENT_PAGE=1

        while true; do
          
          # Fetch all tags for the repository
          url="https://hub.docker.com/v2/repositories/$REPO/tags?page=$CURRENT_PAGE&page_size=100"
          echo "Fetching page $CURRENT_PAGE for tags in $REPO - $url"

          response=$(curl -s -H "Authorization: JWT $DOCKER_TOKEN" -o response.txt -w "%{http_code}" "$url")
          
          # Split the status code and response if status code is not 200 exit ungracefully
          http_code="${response: -3}"
          response_body=$(<response.txt)
          if [[ $http_code -eq 404 ]]; then
            echo "Could not find object so most likely we have reached the end - $response_body ..."
            break
          fi

          if [[ $http_code -ne 200 ]]; then
            echo "Request failed - $response_body ..."
            exit 1
          fi

          # Get all image tags that end with .dev
          TAGS_DEV=$(echo "$response_body" | jq -r '.results[] | select(.name | endswith(".dev")) | .name')

          # Get all image tags that match the staging regex
          TAGS_STAGING=$(echo "$response_body" | jq -r '.results[] | select(.name | test("-ecdf6e4$")) | .name')
          echo "TAGS STAGING TO DELETE: $TAGS_STAGING"

          # Get tags to delete from TAGS_DEV (skip the first N tags)
          TAGS_DEV_TO_DELETE=$(echo "$TAGS_DEV" | tail -n +$((KEEP_LATEST + 1)))

          # Get tags to delete from TAGS_STAGING (skip the first N tags)
          TAGS_STAGING_TO_DELETE=$(echo "$TAGS_STAGING" | tail -n +$((KEEP_LATEST + 1)))

          # Combine the tags to delete from both lists
          TAGS_TO_DELETE=$(echo -e "$TAGS_DEV_TO_DELETE\n$TAGS_STAGING_TO_DELETE")

          # Loop through tags to delete
          for TAG in $TAGS_TO_DELETE; do
            deleteUrl=https://hub.docker.com/v2/repositories/$REPO/tags/$TAG
            echo "Deleting tag: $TAG - $deleteUrl"
            
            response=$(curl -s -X DELETE -H "Authorization: Bearer $DOCKER_TOKEN" -o response.txt -w "%{http_code}" "$deleteUrl")
            http_code="${response: -3}"
            if [[ $http_code -ne 204 ]]; then
              response_body=$(<response.txt)
              echo "Deleting $TAG Request failed $http_code ... $response_body"
              exit 1
            fi
          done

          if [[ "$next" == "null" ]]; then
            echo "Exiting paging loop for $REPO..."
            break
          fi

          KEEP_LATEST=0
          ((CURRENT_PAGE++))
        done

        echo "Cleanup completed for repository: $REPO"