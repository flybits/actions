name: Build Docker Image
author: Petar Kramaric
description: GitHub action for deleting docker hub images
inputs:
  docker_username:
    description: A username of the docker registry
    required: true
  docker_password:
    description: The password associated to the docker registry user
    required: true
  docker_repo:
    description: The repository where the docker image should be saved. Format is {organization}/{repository}
    required: true
  keep_latest:
    description: Keep the latest number of .dev images (how many should not be deleted)
    required: true
    default: 10

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq

    - name: Authenticate with Docker Hub
      shell: bash
      run: |
        echo "Authenticating with Docker Hub..."
        response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\":\"${{ inputs.docker_username }}\",\"password\":\"${{ inputs.docker_password }}\"}" "https://hub.docker.com/v2/users/login/")
        echo "Authentication Response: $response"
        TOKEN=$(echo "$response" | jq -r '.token')
        echo "DOCKER_TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Cleanup Repository Images
      shell: bash
      env:
        DOCKER_TOKEN: ${{ env.DOCKER_TOKEN }}
      run: |
        # Inputs
        REPO="${{ inputs.docker_repo }}"
        KEEP_LATEST="${{ inputs.keep_latest }}"

        echo "Cleaning up images for repository: $REPO"
        CURRENT_PAGE=1

        while true; do
          
          # Fetch all tags for the repository
          url="https://hub.docker.com/v2/repositories/$REPO/tags?page=$CURRENT_PAGE&page_size=100"
         echo "Fetching page $CURRENT_PAGE for tags in $REPO - $url"

          response=$(curl -s -H "Authorization: JWT $DOCKER_TOKEN" -o response.txt -w "%{http_code}" "$url")
          # Split the status code and response
          http_code="${response: -3}"
          response_body=$(<response.txt)
          if [[ $http_code -ne 200 ]]; then
            echo "Request failed..."
            exit 1
          fi

          TAGS=$(echo "$response_body" | jq -r '.results[] | select(.name | endswith(".dev")) | .name' | sort -r)
          if [[ -z "$TAGS" ]]; then
              echo "No Tags found."
              exit 1
          fi
           
          # TAGS=$(curl -s -H "Authorization: Bearer $DOCKER_TOKEN" "https://hub.docker.com/v2/repositories/$REPO/tags?page=$CURRENT_PAGE&page_size=100" | jq -r '.results[] | select(.name | endswith(".dev")) | .name' | sort -r)

          # Get tags to delete (skip the first N tags)
          TAGS_TO_DELETE=$(echo "$TAGS" | tail -n +$((KEEP_LATEST + 1)))

          # Loop through tags to delete
          for TAG in $TAGS_TO_DELETE; do
            echo "Deleting tag: $TAG"

            response=$(curl -s -X DELETE -o response.txt -w "%{http_code}" -H "Authorization: Bearer $DOCKER_TOKEN" "https://hub.docker.com/v2/repositories/$REPO/tags/$TAG")
            http_code="${response: -3}"
            if [[ $http_code -ne 204 ]]; then
              response_body=$(<response.txt)
              echo "Deleting $TAG Request failed $http_code ... $response_body"
              exit 1
            fi
          done

          if [[ "$next" == "null" ]]; then
            echo "Exiting paging loop for $REPO..."
            break
          fi

          ((CURRENT_PAGE++))
        done

        echo "Cleanup completed for repository: $REPO"