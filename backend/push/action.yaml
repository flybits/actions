name: Run Unit Tests
author: Petar Kramaric
description: GitHub action for building backend docker images
inputs:
  github_token:
    description: A GitHub personal access token with repo scope to access private repositories.
    required: true
  docker_username:
    description: A username of the docker registry
    required: true
  docker_password:
    description: The password associated to the docker registry user
    required: true
  docker_repo:
    description: The repository where the docker image should be saved. Format is {organization}/{repository}
    required: true
  ssh_git_key:
    description: The private key certificate that allows for git commands to be executed across internal repositories
    required: true
  who_trigger:
    description: "Who trigger the pipeline"
    required: true
  specific_deployment:
    description: "Is this release for a specific deployment"
    required: false
    default: false
  branch:
    description: Which branch is running the job
    required: true
  type:
    description: "Which server are we deploying to"
    required: true
    options:
      - dev
      - staging
      - production

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        token: ${{ inputs.github_token }}

    #Validate Inputs
    - name: Inputs validation
      shell: bash
      run: |
        if [[ ${{ inputs.type }} == "production" || ${{ inputs.type }} == "staging" ]]; then
          [[ "${{ inputs.branch }}" =~ ^(main)$ ]] || { echo "BRANCH ERROR: This pipeline it's only available for main branch!" ; exit 1; }
        fi

    #Setup SSH Keys
    - name: Setup SSH Keys and known_hosts
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ inputs.ssh_git_key }}"

    #Setup Paths
    #This is needed because its possible there are cases where multiple actions need to be run such as auth;
    #Auth has two images that get deployed one for the Auth service and one for the Auth User Deletion cronjob
    #In order to avoid collisions between the two jobs we need to have different names for the files that get 
    #uploaded.
    - name: Setup Paths
      shell: bash
      run: |
        base64OfImage=`echo -n ${{ inputs.docker_repo }} | base64`
        
        echo "DOCKERIMAGEFILE=`echo -n docker-$base64OfImage.tar`" >> $GITHUB_ENV
        echo "VERSIONFILE=`echo -n VERSION-$base64OfImage`" >> $GITHUB_ENV
        echo "DOCKERVARNAME=`echo -n docker-image-$base64OfImage`" >> $GITHUB_ENV
        echo "VERSIONFILENAME=`echo -n version-from-build-$base64OfImage`" >> $GITHUB_ENV

    #The coorsponding action for storing this artifact can be found in backend/build/action.yaml under "Save Artifact for Push Docker Job"
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.DOCKERVARNAME }}
        path: /tmp

    #The coorsponding action for storing this artifact can be found in backend/build/action.yaml under "Save Artifact for Push Docker Job"
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.VERSIONFILENAME }}
        path: /tmp

    #Expose Version of Image
    - name: Expose Version As Environment Variable
      shell: bash
      run: |
        VERSION=$(cat /tmp/$VERSIONFILE)
        echo "VERSION: $VERSION"
        echo "TAG=${{ inputs.docker_repo }}:${VERSION}" >> $GITHUB_ENV
    
    #Push Docker Image
    - name: Push Docker Image
      shell: bash
      run: |
        docker image load --input /tmp/${{ env.DOCKERIMAGEFILE }}
        docker login --username ${{ inputs.docker_username }} --password ${{ inputs.docker_password }}
        docker push $TAG

    #Push To GitOps
    - name: Push To GitOps
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        echo "IMAGE: $TAG"
        
        git config --global user.name "flybitsbot"
        git config --global user.email "dev@flybits.com"
        
        mkdir git
        cd git
        git clone git@github.com:flybits/gitops.git .
        
        update_image_and_push () {
          kustomize edit set image $TAG

          try_commit_push () {
            UPSTREAM=${1:-'@{u}'}
            DIFFCOMM=$(git fetch origin --quiet; git rev-list HEAD..."$UPSTREAM" --count)
            if [ "$DIFFCOMM" -gt 0 ]; then
              echo "Pulling $UPSTREAM";
              git stash;
              git pull --no-edit;
              git stash pop;
            fi

            git commit -am "Auto-release $TAG"

            #Max re-tries is 4
            for i in {1..4}; do
              if git push origin $BRANCH || try_commit_push; then
                echo "Upload Success"
                break
              else
                SLEEP_TIME=$((RANDOM % 11 + 5))  # Generates a random number between 5 and 15
                echo "Upload failed, retrying attempt $i in $SLEEP_TIME seconds..."
                sleep $SLEEP_TIME
              fi
            done
          }

          # Check empty commit
          if [ -n "$(git status --porcelain)" ]; then
            try_commit_push
          else
            echo "nothing to deploy"
          fi
        }
        
        BRANCH=main

        # development release
        if [[ ${{ inputs.type }} == "dev" ]]; then
          echo "Core Dev (GCP) release..."
          BRANCH=develop
          git checkout $BRANCH
          cd env/core-dev
          update_image_and_push
          cd ../../  # return to root directory
          
          echo "Development (AWS) release..."
          cd env/development
        
        # staging release
        elif [[ ${{ inputs.type }} == "staging" ]]; then
          echo "Core Dev (GCP) release..."
          BRANCH=develop
          git checkout $BRANCH
          cd env/core-dev
          update_image_and_push
          cd ../../  # return to root directory

          echo "Development release..."
          cd env/development
          update_image_and_push
          cd ../../  # return to root directory

          echo "Staging release..."
          BRANCH=main
          git checkout $BRANCH
          cd env/staging

        elif [[ ${{ inputs.type }} == "production" ]]; then
          echo "Production release..."
          cd base
          kustomize edit set image $TAG
          if [ "${{ inputs.specific_deployment }}" == "true" ]; then
            NAME_OF_DEPLOYMENT=$(echo $TAG | cut -f1 -d":" | sed 's/.*\///')
            cd $NAME_OF_DEPLOYMENT
          fi

        # unrecognized tag
        else
          echo "ERROR: Unrecognized tag $TAG. Skipping"
          exit 0
        fi

        update_image_and_push