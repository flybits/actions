name: Build Docker Image
author: Petar Kramaric
description: GitHub action for building backend docker images
inputs:
  github_token:
    description: A GitHub personal access token with repo scope to access private repositories.
    required: true
  docker_username:
    description: A username of the docker registry
    required: true
  docker_password:
    description: The password associated to the docker registry user
    required: true
  ssh_git_key:
    description: The private key certificate that allows for git commands to be executed across internal repositories
    required: true
  docker_repo:
    description: The repository where the docker image should be saved. Format is {organization}/{repository}
    required: true
  docker_file:
    description: The dockerfile to process.
    required: false
    default: Dockerfile
  who_trigger:
    description: "Who trigger the pipeline"
    required: true
  type:
    description: "Which server are we deploying to"
    required: true
    options:
      - dev
      - staging
      - production

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        token: ${{ inputs.github_token }}

    #SETUP GIT LOCAL USER
    - name: Setup Git
      shell: bash
      run: |
        git config user.name "${{ inputs.who_trigger }}"
        git config user.email "${{ inputs.who_trigger }}"
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    #Get New Version
    - name: Update Version of Docker Image
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        if [[ ${{ inputs.type }} == "dev" ]]; then
          SUFFIX="-$(git rev-parse --short HEAD)"
          SUFFIX+=".dev"
          VERSION=${VERSION/-0/$SUFFIX}
        elif [[ ${{ inputs.type }} == "staging" ]]; then
          SUFFIX="-$(git rev-parse --short HEAD)"
          VERSION=${VERSION/-0/$SUFFIX}
        elif [[ ${{ inputs.type }} == "production" ]]; then
          VERSION=${VERSION/-0/}
        fi

        echo "TAG=${{ inputs.docker_repo }}:${VERSION}" >> $GITHUB_ENV
        echo "$VERSION" > VERSION

    #Log in to DockerHub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    #Setup Paths
    #This is needed because its possible there are cases where multiple actions need to be run such as auth;
    #Auth has two images that get deployed one for the Auth service and one for the Auth User Deletion cronjob
    #In order to avoid collisions between the two jobs we need to have different names for the files that get 
    #uploaded.
    - name: Setup Paths
      shell: bash
      run: |
        base64OfImage=`echo -n ${{ inputs.docker_repo }} | base64`
        versionFile=`echo -n VERSION-$base64OfImage`
        
        echo "DOCKERIMAGEFILE=`echo -n ./docker-$base64OfImage.tar`" >> $GITHUB_ENV
        echo "VERSIONFILE=`echo -n $versionFile`" >> $GITHUB_ENV
        echo "DOCKERVARNAME=`echo -n docker-image-$base64OfImage`" >> $GITHUB_ENV
        echo "VERSIONFILENAME=`echo -n version-from-build-$base64OfImage`" >> $GITHUB_ENV

        cp VERSION $versionFile

    #Build Docker Image
    - name: Build Docker Image
      shell: bash
      run: |
        docker image build --file ${{ inputs.docker_file }} --build-arg GITHUB_SSH_KEY="${{ inputs.ssh_git_key}}" --tag $TAG .
        docker image save --output ${{ env.DOCKERIMAGEFILE }} $TAG

    #Save Artifact for Push Docker Job
    - uses: actions/upload-artifact@v5
      with:
        name: ${{ env.DOCKERVARNAME }}
        path: ${{ env.DOCKERIMAGEFILE }}
        retention-days: 5
    
    #Save Artifact for Push Docker Job
    - uses: actions/upload-artifact@v5
      with:
        name: ${{ env.VERSIONFILENAME }}
        path: ${{ env.VERSIONFILE }}
        retention-days: 5