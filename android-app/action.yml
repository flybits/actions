name: Deployment
author: Petar Kramaric
description: GitHub action for deploying android applications
inputs:
  github_token:
    description: A GitHub personal access token with repo scope to access private repositories.
    required: true
  keystore_file:
    description: A keystore file in base64
    required: true
  alias:
    description: An alias used for the keystore file
    required: true
  keystore_password:
    description: The password used for the keystore
    required: true
  alias_password:
    description: The password used for the alias
    required: true
  service_account_json:
    description: The JSON file for the service account
    required: true
  branch:
    description: Which branch is running the job
    required: true
    type: choice
    options:
      - main
  version:
    description: "Semver type of new version (major / minor / patch)"
    required: true
    type: choice
    options:
      - patch
      - minor
      - major
  who_trigger:
    description: "Who trigger the pipeline"
    required: true

runs:
  using: "composite"
  steps:
    #Validate Inputs
    - name: Inputs validation
      shell: bash
      run: |
        current_version=$(cat VERSION_NAME)
        [[ "${{ inputs.github_token }}" ]] || { echo "github_token input is empty" ; exit 1; }
        [[ "${{ inputs.branch }}" ]] || { echo "branch input is empty" ; exit 1; }
        [[ "${{ inputs.keystore_file }}" ]] || { echo "keystore_file input is empty" ; exit 1; }
        [[ "${{ inputs.alias }}" ]] || { echo "alias input is empty" ; exit 1; }
        [[ "${{ inputs.keystore_password }}" ]] || { echo "keystore_password input is empty" ; exit 1; }
        [[ "${{ inputs.alias_password }}" ]] || { echo "alias_password input is empty" ; exit 1; }
        [[ "${{ inputs.service_account_json }}" ]] || { echo "service_account_json input is empty" ; exit 1; }
        [[ "${{ inputs.version }}" ]] || { echo "version input is empty" ; exit 1; }
        [[ "${{ inputs.who_trigger }}" ]] || { echo "who_trigger input is empty" ; exit 1; }
        [[ "${{ inputs.version }}" =~ ^(patch|minor|major)$ ]] || { echo "VERSION ERROR: ${{ inputs.version }} isn't a valid value" ; exit 1; }
        [[ "${{ inputs.branch }}" =~ ^(main)$ ]] || { echo "BRANCH ERROR: This pipeline it's only available for main branch!" ; exit 1; }
        [[ "$current_version" =~ ^[0-9]+.[0-9]+.[0-9]+-[0-9]$ ]] || { echo "VERSION FILE ERROR: INVALID FORMAT!" ; exit 1; }
    
    #Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v4

      #JDK 1.8
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

      #GRANT RIGHTS
    - name: Grant rights
      shell: bash
      run: chmod +x build.gradle

      #BUILD GRADLE
    - name: Build with Gradle
      shell: bash
      id: build
      run: ./gradlew build

      #BUILD RELEASE GRADLE
    - name: Build Release
      shell: bash
      id: buildRelease
      run: ./gradlew bundleRelease

      #SIGN APK
    - name: Sign APK
      id: sign
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ inputs.keystore_file }}
        alias: ${{ inputs.alias }}
        keyStorePassword: ${{ inputs.keystore_password }}
        keyPassword: ${{ inputs.alias_password }}

      #CREATE JSON SERVICE ACCOUNT
    - name: Create service_account.json
      shell: bash
      id: createServiceAccount
      run: echo '${{ inputs.service_account_json }}' > service_account.json

      #UPLOAD TO PLAY STORE
    - name: Deploy to Play Store (BETA)
      id: deploy
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: service_account.json
        packageName: com.flybits.android.life.app
        releaseFile: app/build/outputs/bundle/release/app-release.apk
        track: beta